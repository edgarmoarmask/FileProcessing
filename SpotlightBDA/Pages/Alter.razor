@page "/alter"
@using System;
@using System.IO;
@using System.Timers;
@using System.Text;
@using System.Threading;
@using System.Diagnostics;
@using System.Net.Http;
@using System.Net.Http.Json;
@using SpotlightBDA.Shared;
@using System.Text.RegularExpressions;
@inject IDialogService DialogService
@inject Blazored.LocalStorage.ILocalStorageService ls
@inject HttpClient Http
@inject NavigationManager nav
@inject ApplicationDbContext db
@inject IToastService toastService



@if(showInput)
{
    <br>
    <h2>File Content Policy</h2>


    <br>
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudPaper Class="pa-4">
                <MudForm >
                   <h2>Replace Text</h2>
                    @foreach (ReplacePolicy rp in ReplacePolicyList)
                    {
                        <Replace Model="rp" />
                    }
                <MudButton OnClick="@(()=>ReplacePolicyList.Add(new ReplacePolicy()))" Variant="Variant.Filled" Color="Color.Primary">Add Replace Text</MudButton>
                    <br /><br /><br /><br />
                <h2>Line Length Limit</h2>

                    @foreach (CheckLimitPolicy cp in CheckLimitPolicyList)
                    {
                        <CheckLimit Model="cp" />
                    }
                    <MudButton OnClick="@(()=>CheckLimitPolicyList.Add(new CheckLimitPolicy()))" Variant="Variant.Filled" Color="Color.Primary">Add Line Length Limit</MudButton>
                    <MudButton OnClick="@(()=>Test())" Variant="Variant.Filled" Color="Color.Primary">test</MudButton>
                    <br /><br /><br /><br />
                    <div class="d-flex align-center justify-space-between">
                        <MudButton OnClick="@(()=>Submit())" Variant="Variant.Filled" Color="Color.Secondary">Start File Processing</MudButton>
                    </div>
                </MudForm>
            </MudPaper>
        </MudItem>

    </MudGrid>
}
@if(showOutput)
{
    <br>
    <h2>Cleansing Results</h2>


    <br>
    <Output ResultStatsList="@resultStats"></Output>
}








@code {
    FileProcessPolicy fileProcessPolicy = new();
    List<CheckLimitPolicy> CheckLimitPolicyList = new();
    List<ReplacePolicy> ReplacePolicyList = new();
    bool showInput = true;
    bool showOutput = false;

    List<ResultStats> resultStats = new();

    protected override async Task OnInitializedAsync()
    {


        CheckLimitPolicyList.Add(new CheckLimitPolicy());
        ReplacePolicyList.Add(new ReplacePolicy());

        /*
        if (db.FileProcessPolicies.Any())
            {
            fileProcessPolicy = db.FileProcessPolicies.First();
            CheckLimitPolicyList = fileProcessPolicy.CheckLimitPolicies.ToList();
            ReplacePolicyList = fileProcessPolicy.ReplacePolicies.ToList();
        }
        */

    }

    void Test()
    {
        Console.WriteLine(ReplacePolicyList.First().Find.Value);
    }

    public void Submit()
    {
        ProcessFolder();

        OpenOutput();
        var a = resultStats.First();
        foreach (var ss in a.Messages)
        {
            Console.WriteLine(ss);
        }
        
    }

    public void ProcessFolder()
    {

        foreach (string file in Directory.EnumerateFiles("Samples/K1", "*"))
        {
            CleanseCreateFile(file);
        }

    }


    public void CleanseCreateFile(string file)
    {
        string[] asd = file.Split("/");
        using (var fs = File.Create("Samples/Processed/"+asd.Last()))
        {


            using (var newfile = new StreamWriter(fs))
            {
                //start new file line counter
                int counter = 1;

                //gather statistics for finished file
                ResultStats resstat = new();
                resstat.Filename = asd.Last();
                resstat.Messages = new();

                int replaceCounter = 0;

                //int spechars = 0;

                //var regexItem = @"[^a-zA-Z0-9\.,\s:;\-_\@\(\)\/\+\#\%\$\&\*\=\~\^²]+";

                bool unknownSpecialCharacterFound = true;

                foreach (string line in File.ReadLines(file, Encoding.Latin1))
                {


                    for (int i = 0; i<line.Length; i++)
                    {
                        var c = line[i];
                        unknownSpecialCharacterFound = true;

                        if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || c==' ' || c=='@' || c=='(' || c=='+' || c=='/' || c=='#' || c=='?'|| c==')' || c=='['|| c=='-'|| c=='_'|| c=='='|| c==']'|| c=='.'|| c==',' || c==':' || c=='^'|| c=='\'' || c=='*'|| c=='&' || c=='%' || c==';' || c=='"' || c=='<' || c=='>')
                        {
                            unknownSpecialCharacterFound = false; //is alfanumeric
                        }
                        else
                        {

                            foreach (ReplacePolicy a in ReplacePolicyList)
                            {
                                if (a.Find.Value.Contains(c)) //if user defined character found
                                {
                                    if (!a.Silent)
                                    {
                                        replaceCounter++;
                                        resstat.Messages.Add("Character "+a.Find.Description+" encountered on line "+counter+" column "+i+". Replaced with "+a.Replace);
                                        //line[i] = a.Replace;
                                        unknownSpecialCharacterFound = false;
                                    }
                                    break;
                                }
                            }
                        }

                        if (unknownSpecialCharacterFound==true)
                        {
                            resstat.Messages.Add(@"Unknown Character "+c.ToString()+" found on line "+counter+" column "+i);
                        }

                    }
                    //replace chars

                    /*MatchCollection matches = Regex.Matches(line, regexItem);
                    foreach (Match match in matches)
                        resstat.Messages.Add($"'{match.Value}'");
                    

                    /*
                    foreach (ReplacePolicy a in ReplacePolicyList)
                    {
                        
                        
                        if (writeline.Contains(a.Find.Value))
                        {
                            replaceCounter++;
                            resstat.Messages.Add("Character "+a.Find.Description+" encountered on line "+counter);
                            writeline=writeline.Replace(a.Find.Value, a.Replace);
                        }
                    }
                    newfile.WriteLine(writeline);
                    */

                    //check for line length after cleansing
                    foreach (CheckLimitPolicy b in CheckLimitPolicyList)
                    {
                        if (line.Substring(0, b.StartString.Length) == b.StartString)
                        {
                            
                            if (line.Length > b.Limit)
                            {
                                resstat.Messages.Add("Character limit exceeds "+b.Limit+" on line "+counter+" after cleansing. (Line starts with "+b.StartString+")");
                            }

                        }
                    }

                    counter++;

                }

                if(resstat.Messages.Count()>0)
                {
                    resstat.Messages.Add(replaceCounter+" Total replacements");
                    resultStats.Add(resstat);
                }


            }
        }
    }


    private void OpenDialog()
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true };

        var parameters = new DialogParameters { ["ResultStatsList"]=resultStats };
        DialogService.Show<Dialog>("Result Statistics", parameters, options);
    }

    private void OpenOutput()
    {
        showOutput = true;
        showInput = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var auth = await ls.GetItemAsync<string>("auth");
        if (auth!="set")
        {
            nav.NavigateTo("/login");
        }
        Console.WriteLine("rednders");
    }
}
